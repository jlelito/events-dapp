{"version":3,"sources":["App.js","utils.js","index.js"],"names":["App","useState","undefined","web3","setWeb3","accounts","setAccounts","contract","setContract","events","setEvents","tickets","setTickets","useEffect","a","async","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","eth","getAccounts","net","getId","networkId","deployedNetwork","EventContract","networks","Contract","abi","address","init","on","isReady","updateEvents","parseInt","methods","nextId","call","i","push","all","updateTickets","className","onSubmit","e","preventDefault","name","target","elements","value","date","Math","floor","Date","getTime","price","ticketCount","createEvent","send","from","htmlFor","type","id","eventId","amount","to","transferTicket","map","event","key","admin","toLocaleString","ticketRemaining","now","isFinished","utils","toBN","buyTicket","toString","mul","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2e070c8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport EventContract from './contracts/EventContract.json';\r\nimport { getWeb3 } from './utils.js';\r\n\r\nfunction App() {\r\n  const [web3, setWeb3] = useState(undefined);\r\n  const [accounts, setAccounts] = useState(undefined);\r\n  const [contract, setContract] = useState(undefined);\r\n  const [events, setEvents] = useState([]);\r\n  const [tickets, setTickets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      const web3 = await getWeb3();\r\n      const accounts = await web3.eth.getAccounts();\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = EventContract.networks[networkId];\r\n      const contract = new web3.eth.Contract(\r\n        EventContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      setWeb3(web3);\r\n      setAccounts(accounts);\r\n      setContract(contract);\r\n    }\r\n    init();\r\n    window.ethereum.on('accountsChanged', accounts => {\r\n      setAccounts(accounts);\r\n    });\r\n  }, []);\r\n\r\n  const isReady = () => {\r\n    return (\r\n      typeof contract !== 'undefined' \r\n      && typeof web3 !== 'undefined'\r\n      && typeof accounts !== 'undefined'\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(isReady()) {\r\n      console.log(accounts[0]);\r\n      updateEvents();\r\n      updateTickets();\r\n    }\r\n  }, [accounts, contract, web3]);\r\n\r\n  \r\n\r\n  async function updateEvents() {\r\n    const nextId = parseInt(await contract.methods\r\n      .nextId()\r\n      .call());\r\n\r\n    const events = [];\r\n    for(let i = 0; i < nextId; i++) { \r\n      events.push(contract.methods.events(i).call())\r\n    }\r\n    setEvents(await Promise.all(events));\r\n    await updateTickets();\r\n  }\r\n\r\n  async function updateTickets() {\r\n    const nextId = parseInt(await contract.methods\r\n      .nextId()\r\n      .call());\r\n\r\n    const tickets = [];\r\n    for(let i = 0; i < nextId; i++) { \r\n      tickets.push(contract.methods.tickets(accounts[0], i).call());\r\n    }\r\n    \r\n    setTickets(await Promise.all(tickets));\r\n  }\r\n\r\n  async function transferTicket(e) {\r\n    e.preventDefault();\r\n    console.log(\"transferring tickets\");\r\n    const eventId = e.target.elements[0].value;\r\n    const amount = e.target.elements[1].value;\r\n    const to = e.target.elements[2].value;\r\n    await contract.methods.transferTicket(eventId, amount, to).send({from: accounts[0]});\r\n    await updateEvents();\r\n  };\r\n\r\n  async function buyTicket(e, event) {\r\n    e.preventDefault();\r\n    const amount = web3.utils.toBN(e.target.elements[0].value);\r\n    const price = web3.utils.toBN(event.price);\r\n    await contract.methods\r\n      .buyTicket(event.id, amount.toString())\r\n      .send({from: accounts[0], value: amount.mul(price).toString()});\r\n    await updateEvents();\r\n  };\r\n\r\n  async function createEvent(e) {\r\n    e.preventDefault();\r\n    const name = e.target.elements[0].value;\r\n    const date = Math.floor(\r\n      (new Date(e.target.elements[1].value)).getTime() / 1000\r\n    );\r\n    const price = e.target.elements[2].value;\r\n    const ticketCount = e.target.elements[3].value;\r\n    await contract.methods\r\n    .createEvent(name, date, price, ticketCount)\r\n    .send({from: accounts[0]});\r\n    await updateEvents();\r\n  };\r\n\r\n  function isFinished(event) {\r\n    const now = new Date().getTime();\r\n    const eventEnd =  (new Date(parseInt(event.date) * 1000)).getTime();\r\n    return (eventEnd > now) ? false : true;\r\n  }\r\n\r\n  \r\n\r\n  if (!isReady()) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"text-center\">Event Organization</h1>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <h3>Current Account: {accounts[0]}</h3>\r\n          <h2>Create event</h2>\r\n          <form onSubmit={e => createEvent(e)}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"name\">Name</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"name\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"date\">Date</label>\r\n              <input type=\"date\" className=\"form-control\" id=\"date\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"price\">Price</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"price\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"ticketCount\">Ticket count</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"ticketCount\" />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <h2>Transfer tickets</h2>\r\n          <form onSubmit={e => transferTicket(e)}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"eventId\">Event Id</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"eventId\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"amount\">Amount</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"amount\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"to\">To</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"to\" />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12\">\r\n          <h2>Events</h2>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Id</th>\r\n                <th>Admin</th>\r\n                <th>Name</th>\r\n                <th>Date</th>\r\n                <th>Price</th>\r\n                <th>Ticket remaining</th>\r\n                <th>Total tickets</th>\r\n                <th>Buy</th>\r\n                <th>Number of tickets owned</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {events.map(event => (\r\n                <tr key={event.id}>\r\n                  <td>{event.id}</td>\r\n                  <td>{event.admin}</td>\r\n                  <td>{event.name}</td>\r\n                  <td>\r\n                    {(new Date(parseInt(event.date) * 1000)).toLocaleString()}\r\n                  </td>\r\n                  <td>{event.price}</td>\r\n                  <td>{event.ticketRemaining}</td>\r\n                  <td>{event.ticketCount}</td>\r\n                  <td>\r\n                    {isFinished(event) ? 'Event finished' : (\r\n                      <form onSubmit={e => buyTicket(e, event)}>\r\n                        <div className=\"form-group\">\r\n                          <label htmlFor=\"amount\">Amount</label>\r\n                          <input type=\"text\" className=\"form-control\" id=\"amount\" />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                      </form>\r\n                    )}\r\n                  </td>\r\n                    <td>{tickets[event.id]}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () => {\r\n  return new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://localhost:9545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport { getWeb3 };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}